[project]
name = "sapo"
version = "0.3.1"
description = "A CLI tool for installing and managing JFrog Artifactory OSS"
authors = [
    {name = "Alberto Cavalcante", email = "54247214+albertocavalcante@users.noreply.github.com"}
]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "requests >= 2.32.3, < 3.0.0",
    "rich >= 13.9.4, < 14.0.0",
    "typer >=0.19.2, <0.20.0",
    "pydantic >= 2.6.0, < 2.10.0",
    "tqdm >= 4.67.1, < 5.0.0",
    "semver >= 3.0.4, < 4.0.0",
    "aiohttp >= 3.9.3, < 4.0.0",
    "beautifulsoup4 >= 4.12.3, < 5.0.0",
    "jinja2 (>=3.1.6,<4.0.0)",
    "docker >= 7.1.0, < 8.0.0"
]

[project.scripts]
sapo = "sapo.cli.__main__:main"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"
pytest-cov = "^4.1.0"
mypy = "^1.15.0"
ruff = "^0.13.0"
bandit = "^1.8.3"
safety = "^3.3.1"
pytest-asyncio = "^1.0.0"
types-requests = "^2.32.4.20250809"
types-pyyaml = "^6.0.12.20250822"

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=sapo"
testpaths = [
    "tests",
]
python_files = ["test_*.py"]
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.13
target-version = "py313"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Unlike Black, set the line ending to lf
line-ending = "lf"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
